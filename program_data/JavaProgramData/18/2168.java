package <missing>;

public class GlobalMembers
{
	//============================================================================
	// Name        : 8.2.cpp
	// Author      : Zhang Yu
	// Version     :
	// Copyright   : Your copyright notice
	// Description : ?????????
	//============================================================================

	public static int[][][] matrix = new int[101][101][101];
	public static int countsum; //????sum
	public static void cal(int rank,int num)
	{
		if (rank != 1) //?????1???????????
		{
			//bool rowZeroExist[rank];//?????????0??
			//memset(rowZeroExist,0,sizeof(rowZeroExist));//??
			//bool columnZeroExist[rank];//?????????0??
			//memset(columnZeroExist,0,sizeof(columnZeroExist));//??
			int[] rowmin = new int[rank]; //???????????
			int[] columnmin = new int[rank]; //???????????
			for (int i = 0;i <= rank - 1;++i) //??????????i????
			{
				for (int j = 0;j <= rank - 1;++j) //j????
				{
					if (j == 0) //????????????
					{
						rowmin[i] = matrix[num][i][j]; //????????????
					}
					else //???????????
					{
						rowmin[i] = Math.min(rowmin[i],matrix[num][i][j]); //?????????????????????????????
					}
				}
				if (rowmin[i] != 0) //??????????????????????????
				{
					for (int j = 0;j <= rank - 1;++j)
					{
						matrix[num][i][j] = matrix[num][i][j] - rowmin[i]; //??????????????????
					}
				}
			}
			for (int i = 0;i <= rank - 1;++i) //??????????i????
			{
				for (int j = 0;j <= rank - 1;++j) //j????
				{
					if (j == 0) //????????????
					{
						columnmin[i] = matrix[num][j][i]; //????????????
					}
					else //???????????
					{
						columnmin[i] = Math.min(columnmin[i],matrix[num][j][i]); //?????????????????????????????
					}
				}
				if (columnmin[i] != 0) //??????????????????????????
				{
					for (int j = 0;j <= rank - 1;++j)
					{
						matrix[num][j][i] = matrix[num][j][i] - columnmin[i]; //???????????????????
					}
				}
			}
			countsum += matrix[num][1][1]; //?a[1][1]???
			for (int i = 2;i <= rank - 1;++i)
			{
				for (int j = 0;j <= rank - 1;++j)
				{
					matrix[num][j][i - 1] = matrix[num][j][i]; //??????????????
				}
			}
			for (int i = 2;i <= rank - 1;++i)
			{
				for (int j = 0;j <= rank - 1;++j)
				{
					matrix[num][i - 1][j] = matrix[num][i][j]; //??????????????
				}
			}
			cal(rank - 1, num);
		}
	}
	public static int Main()
	{
		int n;
		n = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
		for (int i = 0;i <= n - 1;++i)
		{
			for (int j = 0;j <= n - 1;++j)
			{
				for (int k = 0;k <= n - 1;++k)
				{
					matrix[i][j][k] = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
				}
			}
		}
		for (int i = 0;i <= n - 1;++i)
		{
			countsum = 0; //????countsum??
			cal(n, i); //??countsum
			System.out.print(countsum);
			System.out.print("\n");
		}
		return 0;
	}

}

