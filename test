# $1 - the dataset folder containing training/testing samples
lang=cpp
directory=$1
MEMORY=${MEMORY:-128G}
TRAIN_SIZE=${TRAIN_SIZE:-128}
EPOCH=${EPOCH:-0}

# derive the number of classes depending on the number of files in the training folder
nn=$(ls $directory/train | wc -l | cut -f1 -d" ")
N_CLASSES=${N_CLASSES:-$nn}
N_ITER=${N_ITER:-1}
STEP_SIZE=${STEP_SIZE:-10}

# the cached dataset
cache=$(dirname $directory)/$(basename $directory)-$N_CLASSES
# comment out if you want to resume computation
rm -f $cache-train.pkl
rm -f $cache-test.pkl

# the model file
model=$directory/$N_CLASSES.cpkl

# use the docker to run training
proxy="--build-arg http_proxy=http://wwwcache.open.ac.uk:80 --build-arg https_proxy=http://wwwcache.open.ac.uk:80"
if [ "$http_proxy" == "" ]; then
 proxy=
fi
docker=nvidia-docker
cuda=--cuda
if [ "ip-172-31-34-92" == "$(hostname)" ]; then
 docker=docker
 cuda=
fi

# docker build $proxy -t progress progress

  NV_GPU=1 /usr/bin/time -f %e \
  $docker run -v $(pwd):/e -w /e --shm-size $MEMORY --rm -it progress \
  python main_ggnn.py \
	$cuda \
	--testing --epoch $EPOCH \
        --manualSeed 0 \
	--model_path $model --directory $directory \
	--n_classes $N_CLASSES \
	--n_steps $STEP_SIZE \
	--n_hidden 50 \
	--niter $N_ITER \
	--test_batch_size ${TRAIN_SIZE} \
        --workers 2
