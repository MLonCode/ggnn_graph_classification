package <missing>;

public class GlobalMembers
{
	public static int Main()
	{
		char[][] a =
		{
			{}
		};
		char[][] b =
		{
			{}
		};
		int n;
		int m;
		int i;
		int j;
		int k;
		int flag = 1;
		int count;
		n = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
		for (i = 0;i < n;i++)
		{
			for (j = 0;j < n;j++)
			{
			a[i][j] = ConsoleInput.readToWhiteSpace(true).charAt(0);
			}
		}
		m = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
		for (k = 1;k < m;k++)
		{
			flag = 0;
			for (i = 0;i < n;i++)
			{
				for (j = 0;j < n;j++)
				{
					if (a[i][j] == '@')
					{
						if (i + 1 < n && a[i + 1][j] == '.')
						{
							b[i + 1][j] = '@';
							flag = 1;
						}
						if (i - 1 >= 0 && a[i - 1][j] == '.')
						{
							b[i - 1][j] = '@';
							flag = 1;
						}
						if (j + 1 < n && a[i][j + 1] == '.')
						{
							b[i][j + 1] = '@';
							flag = 1;
						}
						if (j - 1 >= 0 && a[i][j - 1] == '.')
						{
							b[i][j - 1] = '@';
							flag = 1;
						}
					}
				}
			}
			if (flag == 1)
			{
				for (i = 0;i < n;i++)
				{
				for (j = 0;j < n;j++)
				{
					if (b[i][j] == '@')
					{
						a[i][j] = '@';
					}
				}
				}
			}
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
			memset(b,0,(Character.SIZE / Byte.SIZE));
		}
		count = 0;
		for (i = 0;i < n;i++)
		{
			for (j = 0;j < n;j++)
			{
				if (a[i][j] == '@')
				{
					count++;
				}
			}
		}
				System.out.print(count);
		return 0;
	}

}

