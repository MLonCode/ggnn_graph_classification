package <missing>;

public class GlobalMembers
{
	//????


	public static int mycompare(Object elem1, Object elem2)
	{
//C++ TO JAVA CONVERTER TODO TASK: Java does not have an equivalent to pointers to value types:
//ORIGINAL LINE: int *p1, *p2;
		int p1;
//C++ TO JAVA CONVERTER TODO TASK: Java does not have an equivalent to pointers to value types:
//ORIGINAL LINE: int *p2;
		int p2;
		p1 = (int)elem1;
		p2 = (int)elem2;
		return p2 - p1;
	}

	public static int Main()
	{
		int n;
		int i;
		int money;
		int khead;
		int thead;
		int ktail;
		int ttail;
		int[][] horse = new int[2][1005];
		while ((n = Integer.parseInt(ConsoleInput.readToWhiteSpace(true))).length() > 0)
		{
			if (n == 0)
			{
				break;
			}
			money = 0;
			for (i = 0; i < n; i++)
			{
				horse[0][i] = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
			}
			for (i = 0; i < n; i++)
			{
				horse[1][i] = Integer.parseInt(ConsoleInput.readToWhiteSpace(true));
			}
			qsort(horse[0], n, (Integer.SIZE / Byte.SIZE), mycompare);
			qsort(horse[1], n, (Integer.SIZE / Byte.SIZE), mycompare);
			khead = thead = 0;
			ktail = ttail = n - 1;
			while (khead <= ktail != 0 && thead <= ttail)
			{
				if (horse[0][thead] > horse[1][khead]) //??????????????????? ??????????
				{
					thead++;
					khead++;
					money += 200;
				}
				else if (horse[0][thead] < horse[1][khead]) //??????????????????? ???????????????
				{
					khead++;
					ttail--;
					money -= 200;
				}
				else //???????????????????????,????????????????,??????
				{
					while (thead <= ttail != 0 && khead <= ktail)
					{
						if (horse[0][ttail] > horse[1][ktail])
						{
							ttail--;
							ktail--;
							money += 200;
						}
						else
						{
							if (horse[0][ttail] < horse[1][khead])
							{
								money -= 200;
							}
							ttail--;
							khead++;
							break;
						}
					}
				}
			}
			System.out.print(money);
			System.out.print("\n");
		}
		return 0;
	}

	/*
	?????
	?????????????????????????????
	????????????????????????????
	?????????????????????????????????->???????????
	???????????????????O(n)?
	
	  
	??????? 
	
	(1)??????????????????? ??????????
	
	     ??????? ?????????????? ????????????? ???????????????????? ????
	
	     ???????????(????? ???????)  ?????????? ???????????
	
	(2)??????????????????????? 
	
	     ???????????????????????????? ??????????? ???????????????????  
	
	     ??????? ????????????????? ????? ???????????????
	
	(2)??????????????????? ??????????????? ???????(???)
	
	     ????????????????????????? ????????????? ??????????? ?????????
	
	     ????????? ?
	
	  */
}

