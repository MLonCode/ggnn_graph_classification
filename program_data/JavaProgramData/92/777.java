package <missing>;

public class GlobalMembers
{
	public static int[] TianJi = new int[M];
	public static int[] King = new int[M];

	public static int[][] dp = new int[M][M]; //dp[i][j]????????????????????i?????,

						   //?"?"??j?????,?"?"??i-j?????,??????????.


	public static int cmp(Object a, Object b)

	{

		   return *(int)b - (int)a;

	}


	public static int profit(int x, int y)

	{

		   if (TianJi[x] > King[y])

		   {

				  return 200;

		   }

		   else if (TianJi[x] < King[y])

		   {

				  return -200;

		   }

		   else

		   {

				  return 0;

		   }

	}


	public static void Main()

	{




		   int i;
		   int j;
		   int n;

		   while (scanf("%d", n) && n != 0)

		   {

//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
				  memset(dp, 0, (Integer.SIZE / Byte.SIZE));

				  for (i = 1; i <= n; i++)

				  {

						 String tempVar = ConsoleInput.scanfRead();
						 if (tempVar != null)
						 {
							 TianJi[i] = Integer.parseInt(tempVar);
						 }

				  }

				  for (i = 1; i <= n; i++)

				  {

						 String tempVar2 = ConsoleInput.scanfRead();
						 if (tempVar2 != null)
						 {
							 King[i] = Integer.parseInt(tempVar2);
						 }

				  }

				  //?????????????????

				  qsort(TianJi + 1, n, (Integer.SIZE / Byte.SIZE), cmp);

				  qsort(King + 1, n, (Integer.SIZE / Byte.SIZE), cmp);

				  //??dp

				  for (i = 1; i <= n; i++)

				  {

						 //????????????????????????,????????????????????

						 dp[i][0] = dp[i - 1][0] + profit(n - i + 1, i);
						 //????????????????????????,????????????????

						 dp[i][i] = dp[i - 1][i - 1] + profit(i, i);

						 //?????????????????????????,?????????????????,????i?????????

						 for (j = 1; j < i; j++)

						 {

								dp[i][j] = Math.max((dp[i - 1][j] + profit(n - (i - j) + 1, i)), (dp[i - 1][j - 1] + profit(j, i)));

						 }

				  }

				  //????????

				  int ans = -99999999;

				  for (i = 0; i <= n; i++)

				  {

						 if (ans < dp[n][i])

						 {

								ans = dp[n][i];

						 }

				  }

				  System.out.printf("%d\n", ans);

		   }

	}
}

