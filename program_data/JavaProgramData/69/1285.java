package <missing>;

public class GlobalMembers
{
	public static int Main()
	{
		char[] A = {};
		char[] B = {};
		int[] a = new int[300];
		int[] b = new int[300];
		int i;
		int j;
		int k;
		int n;
		int len1;
		int len2;
		int[] c = new int[300];
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
		memset(A, 0, (Character.SIZE / Byte.SIZE));
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
		memset(B, 0, (Character.SIZE / Byte.SIZE));
		A = ConsoleInput.readToWhiteSpace(true).charAt(0);
		B = ConsoleInput.readToWhiteSpace(true).charAt(0);
		for (i = 0; A[i] != 0; i++)
		{
			;
		}
		len1 = i;
		for (i = 0; B[i] != 0; i++)
		{
			;
		}
		len2 = i;
		if (A[0] == '0' && B[0] == '0' && len1 == len2 && len1 == 1)
		{
			System.out.print('0');
			System.out.print("\n");
		}
		else
		{
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
			memset(a, 0, (Integer.SIZE / Byte.SIZE));
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
			memset(b, 0, (Integer.SIZE / Byte.SIZE));
//C++ TO JAVA CONVERTER TODO TASK: The memory management function 'memset' has no equivalent in Java:
			memset(c, 0, (Integer.SIZE / Byte.SIZE));
			if (len2 > len1)
			{
				j = 0;
				for (i = len2 - 1; i >= 0; i--)
				{
					a[j] = B[i] - '0';
					j++;
				}
				j = 0;
				for (i = len1 - 1; i >= 0; i--)
				{
					b[j] = A[i] - '0';
					j++;
				}
				int t = len1;
				len1 = len2;
				len2 = t;
			}
			else
			{
				j = 0;
				for (i = len1 - 1; i >= 0; i--)
				{
					a[j] = A[i] - '0';
					j++;
				}
				j = 0;
				for (i = len2 - 1; i >= 0; i--)
				{
					b[j] = B[i] - '0';
					j++;
				}
			}
			for (i = 0; i < len1; i++)
			{
				c[i] += (a[i] + b[i]);
				if (c[i] >= 10)
				{
					c[i] = c[i] % 10;
					c[i + 1]++;
				}
			}
			for (i = 299; c[i] == 0; i--)
			{
				;
			}
			if (i == -1)
			{
				System.out.print('0');
				System.out.print("\n");
			}
			else
			{
				for (; i >= 0; i--)
				{
					System.out.print(c[i]);
				}
				System.out.print("\n");
			}
		}
		return 0;
	}
}

