Namespace(cuda=True, directory='program_data/cpp_babi_format_Sep-29-2018-0000003', is_training_ggnn=True, log_path='program_data/cpp_babi_format_Sep-29-2018-0000003/logs', lr=0.01, manualSeed=0, model_path='program_data/cpp_babi_format_Sep-29-2018-0000003/cpp_babi_format_Sep-29-2018-0000003-104.cpkl', n_classes=104, n_hidden=50, n_steps=5, niter=150, size_vocabulary=198, state_dim=5, test_batch_size=32, testing=False, train_batch_size=32, training=True, training_percentage=1.0, verbal=True, workers=0)
Random Seed:  0
  0% 0/104 [00:00<?, ?it/s]  1% 1/104 [00:00<00:13,  7.63it/s]  2% 2/104 [00:00<00:15,  6.39it/s]  3% 3/104 [00:00<00:15,  6.56it/s]  4% 4/104 [00:00<00:15,  6.42it/s]  5% 5/104 [00:00<00:16,  5.95it/s]  6% 6/104 [00:00<00:15,  6.31it/s]  7% 7/104 [00:01<00:16,  5.86it/s]  8% 8/104 [00:01<00:18,  5.08it/s]  9% 9/104 [00:01<00:18,  5.26it/s] 10% 10/104 [00:01<00:18,  5.06it/s] 11% 11/104 [00:01<00:16,  5.74it/s] 12% 12/104 [00:02<00:14,  6.33it/s] 12% 13/104 [00:02<00:15,  5.80it/s] 13% 14/104 [00:02<00:15,  5.94it/s] 14% 15/104 [00:02<00:13,  6.41it/s] 15% 16/104 [00:02<00:15,  5.80it/s] 16% 17/104 [00:02<00:14,  5.88it/s] 17% 18/104 [00:03<00:15,  5.65it/s] 18% 19/104 [00:03<00:14,  5.87it/s] 19% 20/104 [00:03<00:17,  4.93it/s] 20% 21/104 [00:03<00:15,  5.26it/s] 21% 22/104 [00:03<00:14,  5.69it/s] 22% 23/104 [00:03<00:12,  6.32it/s] 23% 24/104 [00:04<00:12,  6.40it/s] 24% 25/104 [00:04<00:15,  4.95it/s] 26% 27/104 [00:04<00:13,  5.65it/s] 27% 28/104 [00:04<00:11,  6.33it/s] 28% 29/104 [00:04<00:11,  6.82it/s] 30% 31/104 [00:05<00:09,  7.31it/s] 31% 32/104 [00:05<00:15,  4.64it/s] 32% 33/104 [00:05<00:13,  5.36it/s] 34% 35/104 [00:05<00:11,  5.95it/s] 35% 36/104 [00:06<00:10,  6.28it/s] 36% 37/104 [00:06<00:10,  6.56it/s] 37% 38/104 [00:06<00:09,  6.89it/s] 38% 39/104 [00:06<00:10,  6.47it/s] 38% 40/104 [00:06<00:08,  7.11it/s] 39% 41/104 [00:07<00:13,  4.52it/s] 40% 42/104 [00:07<00:11,  5.28it/s] 41% 43/104 [00:07<00:10,  6.05it/s] 42% 44/104 [00:07<00:09,  6.36it/s] 43% 45/104 [00:07<00:08,  7.01it/s] 44% 46/104 [00:07<00:08,  6.65it/s] 46% 48/104 [00:07<00:08,  6.94it/s] 47% 49/104 [00:08<00:07,  7.10it/s] 48% 50/104 [00:08<00:06,  7.77it/s] 49% 51/104 [00:08<00:07,  6.79it/s] 50% 52/104 [00:08<00:12,  4.12it/s] 51% 53/104 [00:08<00:10,  4.84it/s] 53% 55/104 [00:09<00:09,  5.42it/s] 55% 57/104 [00:09<00:07,  6.13it/s] 56% 58/104 [00:09<00:07,  6.47it/s] 57% 59/104 [00:09<00:07,  6.20it/s] 58% 60/104 [00:09<00:06,  6.73it/s] 60% 62/104 [00:10<00:05,  7.56it/s] 61% 63/104 [00:10<00:05,  7.29it/s] 62% 64/104 [00:10<00:06,  6.63it/s] 62% 65/104 [00:10<00:10,  3.66it/s] 63% 66/104 [00:11<00:08,  4.25it/s] 64% 67/104 [00:11<00:07,  5.05it/s] 65% 68/104 [00:11<00:06,  5.66it/s] 66% 69/104 [00:11<00:06,  5.53it/s] 67% 70/104 [00:11<00:05,  6.03it/s] 68% 71/104 [00:11<00:05,  6.13it/s] 69% 72/104 [00:11<00:05,  6.21it/s] 70% 73/104 [00:12<00:04,  6.32it/s] 71% 74/104 [00:12<00:04,  6.17it/s] 72% 75/104 [00:12<00:04,  6.21it/s] 73% 76/104 [00:12<00:04,  6.18it/s] 74% 77/104 [00:12<00:04,  6.55it/s] 75% 78/104 [00:12<00:03,  6.78it/s] 76% 79/104 [00:12<00:03,  6.86it/s] 77% 80/104 [00:13<00:07,  3.21it/s] 78% 81/104 [00:13<00:06,  3.73it/s] 79% 82/104 [00:13<00:04,  4.44it/s] 80% 83/104 [00:14<00:04,  4.90it/s] 81% 84/104 [00:14<00:03,  5.73it/s] 82% 85/104 [00:14<00:03,  6.18it/s] 83% 86/104 [00:14<00:02,  6.55it/s] 84% 87/104 [00:14<00:02,  7.29it/s] 86% 89/104 [00:14<00:01,  7.75it/s] 87% 90/104 [00:14<00:01,  7.83it/s] 88% 92/104 [00:15<00:01,  7.58it/s] 90% 94/104 [00:15<00:01,  7.86it/s] 91% 95/104 [00:15<00:01,  7.82it/s] 92% 96/104 [00:15<00:01,  7.42it/s] 94% 98/104 [00:15<00:00,  7.91it/s] 95% 99/104 [00:16<00:00,  7.81it/s] 96% 100/104 [00:16<00:00,  7.66it/s] 97% 101/104 [00:17<00:00,  3.06it/s] 98% 102/104 [00:17<00:00,  3.53it/s] 99% 103/104 [00:17<00:00,  4.28it/s]100% 104/104 [00:17<00:00,  5.01it/s]
Number of all training data : 34627
Max node id : 189
  0% 0/104 [00:00<?, ?it/s]  2% 2/104 [00:00<00:08, 11.51it/s]  4% 4/104 [00:00<00:07, 12.73it/s]  6% 6/104 [00:00<00:07, 13.07it/s]  8% 8/104 [00:00<00:07, 12.72it/s] 10% 10/104 [00:00<00:07, 12.81it/s] 12% 12/104 [00:00<00:06, 13.85it/s] 13% 14/104 [00:01<00:06, 14.07it/s] 15% 16/104 [00:01<00:05, 14.91it/s] 17% 18/104 [00:01<00:06, 13.69it/s] 19% 20/104 [00:01<00:06, 13.61it/s] 21% 22/104 [00:01<00:06, 13.55it/s] 23% 24/104 [00:01<00:05, 13.98it/s] 25% 26/104 [00:01<00:05, 15.09it/s] 27% 28/104 [00:01<00:05, 15.20it/s] 29% 30/104 [00:02<00:04, 16.17it/s] 31% 32/104 [00:02<00:04, 14.93it/s] 33% 34/104 [00:02<00:04, 16.11it/s] 35% 36/104 [00:02<00:04, 15.17it/s] 37% 38/104 [00:02<00:04, 15.12it/s] 38% 40/104 [00:02<00:04, 14.87it/s] 40% 42/104 [00:02<00:04, 15.22it/s] 42% 44/104 [00:04<00:12,  4.66it/s] 44% 46/104 [00:04<00:09,  5.82it/s] 46% 48/104 [00:04<00:07,  7.15it/s] 48% 50/104 [00:04<00:06,  8.65it/s] 50% 52/104 [00:04<00:05,  9.61it/s] 52% 54/104 [00:04<00:04, 11.17it/s] 54% 56/104 [00:04<00:03, 12.04it/s] 56% 58/104 [00:04<00:03, 12.78it/s] 58% 60/104 [00:05<00:03, 12.97it/s] 61% 63/104 [00:05<00:02, 13.96it/s] 62% 65/104 [00:05<00:02, 13.52it/s] 64% 67/104 [00:05<00:02, 14.04it/s] 66% 69/104 [00:05<00:02, 13.57it/s] 68% 71/104 [00:05<00:02, 13.62it/s] 70% 73/104 [00:05<00:02, 13.52it/s] 72% 75/104 [00:06<00:02, 13.18it/s] 74% 77/104 [00:06<00:02, 13.32it/s] 76% 79/104 [00:06<00:01, 13.74it/s] 78% 81/104 [00:06<00:01, 13.16it/s] 80% 83/104 [00:06<00:01, 13.51it/s] 82% 85/104 [00:06<00:01, 14.25it/s] 84% 87/104 [00:06<00:01, 15.02it/s] 86% 89/104 [00:07<00:00, 15.50it/s] 88% 91/104 [00:07<00:00, 16.34it/s] 89% 93/104 [00:07<00:00, 15.47it/s] 91% 95/104 [00:07<00:00, 15.29it/s] 93% 97/104 [00:07<00:00, 15.69it/s] 95% 99/104 [00:07<00:00, 15.69it/s] 97% 101/104 [00:07<00:00, 15.51it/s] 99% 103/104 [00:08<00:00, 14.64it/s]100% 104/104 [00:08<00:00, 12.86it/s]
Number of all testing data : 17367
Max node id : 197
/opt/conda/lib/python3.6/site-packages/torch/onnx/utils.py:365: UserWarning: ONNX export failed on ATen operator stack because torch.onnx.symbolic.stack does not exist
  .format(op_name, op_name))
/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py:43: UserWarning: Error getting attributes of node %98 : Dynamic = onnx::Constant[value={1}](), scope: GGNN/Propogator[propogator], error is VariableType::ID() not implemented
  warnings.warn("Error getting attributes of node {}, error is {}".format(attrs, e))
/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py:43: UserWarning: Error getting attributes of node %161 : Dynamic = onnx::Constant[value={1}](), scope: GGNN/Propogator[propogator], error is VariableType::ID() not implemented
  warnings.warn("Error getting attributes of node {}, error is {}".format(attrs, e))
/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py:43: UserWarning: Error getting attributes of node %224 : Dynamic = onnx::Constant[value={1}](), scope: GGNN/Propogator[propogator], error is VariableType::ID() not implemented
  warnings.warn("Error getting attributes of node {}, error is {}".format(attrs, e))
/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py:43: UserWarning: Error getting attributes of node %287 : Dynamic = onnx::Constant[value={1}](), scope: GGNN/Propogator[propogator], error is VariableType::ID() not implemented
  warnings.warn("Error getting attributes of node {}, error is {}".format(attrs, e))
/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py:43: UserWarning: Error getting attributes of node %350 : Dynamic = onnx::Constant[value={1}](), scope: GGNN/Propogator[propogator], error is VariableType::ID() not implemented
  warnings.warn("Error getting attributes of node {}, error is {}".format(attrs, e))
[0/150][0/1083] Loss: 4.6429
[0/150][109/1083] Loss: 4.6471
[0/150][218/1083] Loss: 4.6471
[0/150][327/1083] Loss: 4.6276
[0/150][436/1083] Loss: 4.6209
[0/150][545/1083] Loss: 4.6062
[0/150][654/1083] Loss: 4.5723
[0/150][763/1083] Loss: 4.6256
[0/150][872/1083] Loss: 4.5187
[0/150][981/1083] Loss: 4.5601
Test set: Average loss: 0.1419, Accuracy: 2147/17367 (12%)
[1/150][0/1083] Loss: 4.5446
[1/150][109/1083] Loss: 4.4769
[1/150][218/1083] Loss: 4.5228
[1/150][327/1083] Loss: 4.4997
[1/150][436/1083] Loss: 4.5544
[1/150][545/1083] Loss: 4.5968
[1/150][654/1083] Loss: 4.5542
[1/150][763/1083] Loss: 4.6283
[1/150][872/1083] Loss: 4.5621
[1/150][981/1083] Loss: 4.5961
Test set: Average loss: 0.1413, Accuracy: 2449/17367 (14%)
[2/150][0/1083] Loss: 4.5976
[2/150][109/1083] Loss: 4.4783
[2/150][218/1083] Loss: 4.4681
[2/150][327/1083] Loss: 4.4726
[2/150][436/1083] Loss: 4.5468
[2/150][545/1083] Loss: 4.4027
[2/150][654/1083] Loss: 4.4987
[2/150][763/1083] Loss: 4.4063
[2/150][872/1083] Loss: 4.5606
[2/150][981/1083] Loss: 4.5930
Test set: Average loss: 0.1413, Accuracy: 2486/17367 (14%)
[3/150][0/1083] Loss: 4.5642
[3/150][109/1083] Loss: 4.5222
[3/150][218/1083] Loss: 4.5995
[3/150][327/1083] Loss: 4.5433
[3/150][436/1083] Loss: 4.4875
[3/150][545/1083] Loss: 4.5531
[3/150][654/1083] Loss: 4.4727
[3/150][763/1083] Loss: 4.5348
[3/150][872/1083] Loss: 4.5047
[3/150][981/1083] Loss: 4.4145
Test set: Average loss: 0.1410, Accuracy: 2618/17367 (15%)
[4/150][0/1083] Loss: 4.4433
[4/150][109/1083] Loss: 4.4409
[4/150][218/1083] Loss: 4.5965
[4/150][327/1083] Loss: 4.5658
^CProcess Process-17:
Traceback (most recent call last):
  File "/opt/conda/lib/python3.6/multiprocessing/process.py", line 258, in _bootstrap
    self.run()
  File "/opt/conda/lib/python3.6/multiprocessing/process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "/opt/conda/lib/python3.6/site-packages/torch/utils/data/dataloader.py", line 52, in _worker_loop
    r = index_queue.get()
  File "/opt/conda/lib/python3.6/multiprocessing/queues.py", line 335, in get
    res = self._reader.recv_bytes()
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 407, in _recv_bytes
    buf = self._recv(4)
  File "/opt/conda/lib/python3.6/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
Traceback (most recent call last):
  File "main_ggnn.py", line 102, in <module>
    main(opt)
  File "main_ggnn.py", line 93, in main
    train(epoch, train_dataloader, net, criterion, optimizer, opt, writer)
  File "/e/utils/train_ggnn.py", line 27, in train
    writer.add_graph(net, (init_input, adj_matrix), verbose=False)
  File "/opt/conda/lib/python3.6/site-packages/tensorboardX/writer.py", line 520, in add_graph
    self.file_writer.add_graph(graph(model, input_to_model, verbose))
  File "/opt/conda/lib/python3.6/site-packages/tensorboardX/pytorch_graph.py", line 84, in graph
    trace, _ = torch.jit.get_trace_graph(model, args)
  File "/opt/conda/lib/python3.6/site-packages/torch/jit/__init__.py", line 255, in get_trace_graph
    return LegacyTracedModule(f, nderivs=nderivs)(*args, **kwargs)
  File "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py", line 491, in __call__
    result = self.forward(*input, **kwargs)
  File "/opt/conda/lib/python3.6/site-packages/torch/jit/__init__.py", line 288, in forward
    out = self.inner(*trace_inputs)
  File "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self._slow_forward(*input, **kwargs)
  File "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py", line 479, in _slow_forward
    result = self.forward(*input, **kwargs)
  File "/e/utils/model.py", line 179, in forward
    prop_state = self.propogator(in_states, out_states, prop_state, A)
  File "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self._slow_forward(*input, **kwargs)
  File "/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py", line 479, in _slow_forward
    result = self.forward(*input, **kwargs)
  File "/e/utils/model.py", line 46, in forward
    A_in = A[:, :, :self.n_node*self.n_edge_types]
KeyboardInterrupt
(12%)
(14%)
(14%)
(15%)
